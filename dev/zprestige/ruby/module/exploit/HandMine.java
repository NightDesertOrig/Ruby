//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.module.*;
import dev.zprestige.ruby.settings.impl.*;
import net.minecraft.init.*;
import dev.zprestige.ruby.util.*;
import net.minecraft.util.math.*;
import dev.zprestige.ruby.events.*;
import net.minecraft.client.network.*;
import java.util.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;
import dev.zprestige.ruby.eventbus.annotation.*;

public class HandMine extends Module
{
    public final Switch silent;
    public boolean switched;
    int currentItem;
    
    public HandMine() {
        this.silent = this.Menu.Switch("Silent");
        this.switched = false;
        this.currentItem = -1;
    }
    
    @Override
    public void onTick() {
        if (this.silent.GetSwitch()) {
            return;
        }
        final RayTraceResult rayTraceResult = this.mc.objectMouseOver;
        final int slot = InventoryUtil.getItemFromHotbar(Items.DIAMOND_PICKAXE);
        if (this.switched && (this.mc.gameSettings.keyBindAttack.isKeyDown() || rayTraceResult == null || rayTraceResult.typeOfHit.equals((Object)RayTraceResult.Type.BLOCK))) {
            this.mc.player.inventory.currentItem = this.currentItem;
            this.mc.playerController.updateController();
            this.switched = false;
        }
        if (this.mc.gameSettings.keyBindAttack.isKeyDown() && rayTraceResult != null && rayTraceResult.typeOfHit.equals((Object)RayTraceResult.Type.BLOCK) && slot != -1) {
            this.currentItem = this.mc.player.inventory.currentItem;
            InventoryUtil.switchToSlot(slot);
            this.switched = true;
        }
    }
    
    @RegisterListener
    public void onBlockEvent(final BlockInteractEvent.ClickBlock event) {
        if (this.nullCheck() || !this.isEnabled() || !this.silent.GetSwitch()) {
            return;
        }
        if (this.mc.playerController.curBlockDamageMP > 0.1f) {
            this.mc.playerController.isHittingBlock = true;
        }
        final int slot = InventoryUtil.getItemFromHotbar(Items.DIAMOND_PICKAXE);
        if (!this.mc.player.getHeldItemMainhand().getItem().equals(Items.DIAMOND_PICKAXE) && slot != -1) {
            final int currentItem = this.mc.player.inventory.currentItem;
            InventoryUtil.switchToSlot(slot);
            Objects.requireNonNull(this.mc.getConnection()).sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.pos, event.facing));
            this.mc.player.inventory.currentItem = currentItem;
            this.mc.playerController.updateController();
        }
    }
}
