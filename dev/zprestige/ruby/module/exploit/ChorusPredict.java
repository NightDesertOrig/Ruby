//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.module.*;
import dev.zprestige.ruby.settings.impl.*;
import dev.zprestige.ruby.events.*;
import net.minecraft.entity.player.*;
import dev.zprestige.ruby.eventbus.annotation.*;
import net.minecraft.util.math.*;
import dev.zprestige.ruby.util.*;

public class ChorusPredict extends Module
{
    public final Slider removeDelay;
    public final Parent misc;
    public final Switch rotateToPos;
    public final Switch rotateOnlyIfSafe;
    public final Parent rendering;
    public final ColorBox boxColor;
    public final ColorBox outlineColor;
    public final Slider outlineWidth;
    public Timer removeTimer;
    public double x;
    public double y;
    public double z;
    public float f;
    
    public ChorusPredict() {
        this.removeDelay = this.Menu.Slider("Remove Delay", 0, 10000);
        this.misc = this.Menu.Parent("Misc");
        this.rotateToPos = this.Menu.Switch("Rotate To Pos").parent(this.misc);
        this.rotateOnlyIfSafe = this.Menu.Switch("Rotate Only If Safe").parent(this.misc);
        this.rendering = this.Menu.Parent("Rendering");
        this.boxColor = this.Menu.Color("Box Color").parent(this.rendering);
        this.outlineColor = this.Menu.Color("Outline Color").parent(this.rendering);
        this.outlineWidth = this.Menu.Slider("Outline Width", 0.1f, 5.0f).parent(this.rendering);
        this.removeTimer = new Timer();
    }
    
    @RegisterListener
    public void onChorus(final ChorusEvent event) {
        if (this.nullCheck() || !this.isEnabled()) {
            return;
        }
        if (this.mc.player.getDistanceSq(new BlockPos(event.x, event.y, event.z)) < 4.0) {
            return;
        }
        this.x = event.x;
        this.y = event.y;
        this.z = event.z;
        this.f = 0.0f;
        this.removeTimer.setTime(0);
        if (this.rotateToPos.GetSwitch()) {
            if (this.rotateOnlyIfSafe.GetSwitch() && !BlockUtil.isPlayerSafe((EntityPlayer)this.mc.player)) {
                return;
            }
            this.posRotate(new BlockPos(this.x, this.y, this.z));
        }
    }
    
    public void posRotate(final BlockPos pos) {
        final float[] angle = BlockUtil.calcAngle(this.mc.player.getPositionEyes(this.mc.getRenderPartialTicks()), new Vec3d((double)(pos.getX() + 0.5f), (double)(pos.getY() - 0.5f), (double)(pos.getZ() + 0.5f)));
        this.mc.player.rotationYaw = angle[0];
        this.mc.player.rotationPitch = angle[1];
    }
    
    @Override
    public void onFrame(final float partialTicks) {
        if (this.removeTimer.getTimeSub((long)this.removeDelay.GetSlider())) {
            this.f = AnimationUtil.increaseNumber(this.f, 2.0f, 0.02f);
            final AxisAlignedBB bb = new AxisAlignedBB(new BlockPos(this.x, this.y, this.z));
            RenderUtil.drawBBBoxWithHeight(bb, this.boxColor.GetColor(), this.boxColor.GetColor().getAlpha(), this.f);
            RenderUtil.drawBlockOutlineBBWithHeight(bb, this.outlineColor.GetColor(), this.outlineWidth.GetSlider(), this.f);
        }
    }
}
