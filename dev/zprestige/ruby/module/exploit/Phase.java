//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.module.*;
import dev.zprestige.ruby.settings.impl.*;
import dev.zprestige.ruby.eventbus.annotation.*;
import dev.zprestige.ruby.events.*;
import net.minecraft.network.play.server.*;
import net.minecraft.init.*;
import dev.zprestige.ruby.util.*;
import net.minecraft.util.math.*;

public class Phase extends Module
{
    public final Slider horizontalFactor;
    public final Slider downFactor;
    public final Switch packetLimiter;
    public final Slider packetLimit;
    public final Slider packetLimitRestartValue;
    public final Switch showGaps;
    public final ColorBox gapColor;
    public int rubberbandPackets;
    
    public Phase() {
        this.horizontalFactor = this.Menu.Slider("Horizontal Factor", 0.1f, 50.0f);
        this.downFactor = this.Menu.Slider("Down Factor", 0.1f, 10.0f);
        this.packetLimiter = this.Menu.Switch("Packet Limiter");
        this.packetLimit = this.Menu.Slider("Packet Limit", 0, 20);
        this.packetLimitRestartValue = this.Menu.Slider("Packet Limit Restart Value", 0, 5);
        this.showGaps = this.Menu.Switch("Show Gaps");
        this.gapColor = this.Menu.Color("Gap Color");
        this.rubberbandPackets = 0;
    }
    
    @RegisterListener
    public void onMove(final MoveEvent event) {
        if (this.nullCheck() || !this.isEnabled()) {
            return;
        }
        this.mc.player.noClip = true;
        if (this.packetLimiter.GetSwitch() && this.rubberbandPackets >= this.packetLimit.GetSlider()) {
            event.setMotion(0.0, 0.0, 0.0);
            this.rubberbandPackets = ((this.rubberbandPackets >= this.packetLimit.GetSlider() + this.packetLimitRestartValue.GetSlider()) ? 0 : (this.rubberbandPackets + 1));
            return;
        }
        final double[] motion = EntityUtil.getSpeed(this.horizontalFactor.GetSlider() / 100.0);
        event.setMotion(motion[0], this.mc.gameSettings.keyBindSneak.isKeyDown() ? (-this.downFactor.GetSlider() / 100.0) : 0.0, motion[1]);
    }
    
    @RegisterListener
    public void onPacketReceive(final PacketEvent.PacketReceiveEvent event) {
        if (this.nullCheck() || !this.isEnabled() || !(event.getPacket() instanceof SPacketPlayerPosLook) || !this.packetLimiter.GetSwitch()) {
            return;
        }
        ++this.rubberbandPackets;
    }
    
    @Override
    public void onFrame(final float partialTicks) {
        if (!this.showGaps.GetSwitch()) {
            return;
        }
        final BlockPos pos = BlockUtil.getPlayerPos();
        if (this.mc.world.getBlockState(pos.down()).getBlock().equals(Blocks.AIR)) {
            RenderUtil.drawFullBox(true, true, this.gapColor.GetColor(), this.gapColor.GetColor(), 1.0f, pos.down());
        }
    }
}
