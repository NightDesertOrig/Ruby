//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.module.*;
import dev.zprestige.ruby.settings.impl.*;
import net.minecraft.network.play.client.*;
import dev.zprestige.ruby.events.*;
import net.minecraft.network.play.server.*;
import dev.zprestige.ruby.eventbus.annotation.*;
import net.minecraft.client.network.*;
import java.util.*;
import net.minecraft.network.*;
import net.minecraft.util.math.*;
import dev.zprestige.ruby.util.*;
import net.minecraft.client.gui.*;
import dev.zprestige.ruby.*;

public class ChorusManipulator extends Module
{
    public static ChorusManipulator Instance;
    public final ColorBox boxColor;
    public final ColorBox outlineColor;
    public final Slider outlineWidth;
    public Queue<CPacketPlayer> packets;
    public Queue<CPacketConfirmTeleport> tpPackets;
    public double x;
    public double y;
    public double z;
    public float f;
    
    public ChorusManipulator() {
        this.boxColor = this.Menu.Color("Box Color");
        this.outlineColor = this.Menu.Color("Outline Color");
        this.outlineWidth = this.Menu.Slider("Outline Width", 0.1f, 5.0f);
        this.packets = new LinkedList<CPacketPlayer>();
        this.tpPackets = new LinkedList<CPacketConfirmTeleport>();
        ChorusManipulator.Instance = this;
    }
    
    @RegisterListener
    public void onPacketEvent(final PacketEvent event) {
        if (!this.isEnabled() || this.nullCheck()) {
            return;
        }
        if (event.getPacket() instanceof SPacketPlayerPosLook) {
            this.x = ((SPacketPlayerPosLook)event.getPacket()).getX();
            this.y = ((SPacketPlayerPosLook)event.getPacket()).getY();
            this.z = ((SPacketPlayerPosLook)event.getPacket()).getZ();
            this.f = 0.0f;
            event.setCancelled(true);
        }
        if (event.getPacket() instanceof CPacketPlayer) {
            this.packets.add((CPacketPlayer)event.getPacket());
            event.setCancelled(true);
        }
        if (event.getPacket() instanceof CPacketConfirmTeleport) {
            this.tpPackets.add((CPacketConfirmTeleport)event.getPacket());
            event.setCancelled(true);
        }
    }
    
    @Override
    public void onDisable() {
        while (!this.packets.isEmpty()) {
            Objects.requireNonNull(this.mc.getConnection()).sendPacket((Packet)Objects.requireNonNull((Packet)this.packets.poll()));
        }
        while (!this.tpPackets.isEmpty()) {
            Objects.requireNonNull(this.mc.getConnection()).sendPacket((Packet)Objects.requireNonNull((Packet)this.tpPackets.poll()));
        }
    }
    
    @Override
    public void onFrame(final float partialTicks) {
        this.f = AnimationUtil.increaseNumber(this.f, 2.0f, 0.02f);
        final AxisAlignedBB bb = new AxisAlignedBB(new BlockPos(this.x, this.y, this.z));
        RenderUtil.drawBBBoxWithHeight(bb, this.boxColor.GetColor(), this.boxColor.GetColor().getAlpha(), this.f);
        RenderUtil.drawBlockOutlineBBWithHeight(bb, this.outlineColor.GetColor(), this.outlineWidth.GetSlider(), this.f);
    }
    
    @Override
    public void onFrame2D() {
        final int width = new ScaledResolution(this.mc).getScaledWidth();
        final int height = new ScaledResolution(this.mc).getScaledHeight();
        Ruby.fontManager.drawStringWithShadow("Manipulating chorus... " + this.packets.size() + " | " + this.tpPackets.size(), width / 2.0f - Ruby.fontManager.getStringWidth("Manipulating chorus... " + this.packets.size() + " | " + this.tpPackets.size()) / 2.0f, height / 2.0f + 10.0f, -1);
    }
}
